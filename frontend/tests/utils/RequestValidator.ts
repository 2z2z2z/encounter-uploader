import axios, { AxiosRequestConfig, InternalAxiosRequestConfig } from 'axios'
import * as fs from 'fs/promises'
import * as path from 'path'

export interface RequestSnapshot {
  url: string
  method: string | undefined
  headers: any
  data: Record<string, any>
  timestamp: number
}

export interface ValidationResult {
  valid: boolean
  error?: string
  differences?: string[]
  missing?: string[]
  extra?: string[]
}

export interface SnapshotComparison {
  matches: boolean
  differences: Array<{
    field: string
    expected: any
    actual: any
  }>
  recommendation: string
}

export class RequestValidator {
  private baseline: Map<string, RequestSnapshot> = new Map()
  private interceptorId: number | null = null
  
  /**
   * –ü–∞—Ä—Å–∏—Ç form-urlencoded –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç
   */
  private parseFormData(data: any): Record<string, any> {
    if (typeof data !== 'string') return data
    
    const params = new URLSearchParams(data)
    const result: Record<string, any> = {}
    
    for (const [key, value] of params.entries()) {
      result[key] = value
    }
    
    return result
  }
  
  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ —Ç–µ–∫—É—â–µ–π (—Ä–∞–±–æ—á–µ–π) –≤–µ—Ä—Å–∏–∏
   */
  async recordBaseline(): Promise<void> {
    console.log('üìù –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...')
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /api/admin/*
    this.interceptorId = axios.interceptors.request.use(
      (config: InternalAxiosRequestConfig) => {
        if (config.url?.includes('/api/admin/')) {
          const snapshot: RequestSnapshot = {
            url: config.url,
            method: config.method,
            headers: { ...config.headers },
            data: this.parseFormData(config.data),
            timestamp: Date.now()
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ —Ç–∏–ø—É –∑–∞–ø—Ä–æ—Å–∞
          const requestType = this.getRequestType(config.url)
          const key = `${requestType}-${Object.keys(this.parseFormData(config.data)).length}`
          this.baseline.set(key, snapshot)
          
          console.log(`  ‚úÖ –ó–∞–ø–∏—Å–∞–Ω —ç—Ç–∞–ª–æ–Ω: ${key}`)
        }
        return config
      }
    )
  }
  
  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å —ç—Ç–∞–ª–æ–Ω–æ–≤
   */
  stopRecording(): void {
    if (this.interceptorId !== null) {
      axios.interceptors.request.eject(this.interceptorId)
      this.interceptorId = null
      console.log('‚èπÔ∏è –ó–∞–ø–∏—Å—å —ç—Ç–∞–ª–æ–Ω–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    }
  }
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ URL
   */
  private getRequestType(url: string): 'task' | 'sector' | 'bonus' | 'unknown' {
    if (url.includes('/task')) return 'task'
    if (url.includes('/sector')) return 'sector'
    if (url.includes('/bonus')) return 'bonus'
    return 'unknown'
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ç–∞–ª–æ–Ω—ã –≤ —Ñ–∞–π–ª
   */
  async saveBaseline(filepath: string): Promise<void> {
    const data = Array.from(this.baseline.entries()).map(([key, value]) => ({
      key,
      ...value
    }))
    
    await fs.mkdir(path.dirname(filepath), { recursive: true })
    await fs.writeFile(filepath, JSON.stringify(data, null, 2), 'utf-8')
    console.log(`üíæ –≠—Ç–∞–ª–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${filepath}`)
  }
  
  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
   */
  async loadBaseline(filepath: string): Promise<void> {
    const content = await fs.readFile(filepath, 'utf-8')
    const data = JSON.parse(content)
    
    this.baseline.clear()
    for (const item of data) {
      const { key, ...snapshot } = item
      this.baseline.set(key, snapshot as RequestSnapshot)
    }
    
    console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.baseline.size} —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤`)
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–∞–∑–ª–∏—á–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–º
   */
  private isAcceptableDiff(key: string, expected: any, actual: any): boolean {
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ ID –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
    if (key === 'timestamp' || key.includes('_id')) return true
    
    // –î–ª—è —É—Ä–æ–≤–Ω–µ–π - –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –±—ã–ª —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω
    if (key.startsWith('level_')) {
      return actual === 'on' || expected === 'on'
    }
    
    return false
  }
  
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–∞–ª–æ–Ω–∞
   */
  validateRequest(url: string, data: any): ValidationResult {
    const requestType = this.getRequestType(url)
    const parsedData = this.parseFormData(data)
    const dataKeys = Object.keys(parsedData).length
    const key = `${requestType}-${dataKeys}`
    
    const baseline = this.baseline.get(key)
    if (!baseline) {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–π —ç—Ç–∞–ª–æ–Ω
      const similarKey = Array.from(this.baseline.keys()).find(k => k.startsWith(requestType))
      if (similarKey) {
        const similar = this.baseline.get(similarKey)!
        return {
          valid: false,
          error: `–ù–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —ç—Ç–∞–ª–æ–Ω–∞ –¥–ª—è ${key}, –Ω–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π: ${similarKey}`,
          differences: [`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: –æ–∂–∏–¥–∞–ª–æ—Å—å ${Object.keys(similar.data).length}, –ø–æ–ª—É—á–µ–Ω–æ ${dataKeys}`]
        }
      }
      
      return { 
        valid: false, 
        error: `–≠—Ç–∞–ª–æ–Ω –¥–ª—è ${key} –Ω–µ –Ω–∞–π–¥–µ–Ω` 
      }
    }
    
    const validation: ValidationResult = {
      valid: true,
      differences: [],
      missing: [],
      extra: []
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏–∑ —ç—Ç–∞–ª–æ–Ω–∞
    for (const [key, value] of Object.entries(baseline.data)) {
      if (!(key in parsedData)) {
        validation.missing!.push(key)
        validation.valid = false
      } else if (parsedData[key] !== value && !this.isAcceptableDiff(key, value, parsedData[key])) {
        validation.differences!.push(`${key}: –æ–∂–∏–¥–∞–ª–æ—Å—å "${value}", –ø–æ–ª—É—á–µ–Ω–æ "${parsedData[key]}"`)
        validation.valid = false
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π
    for (const key of Object.keys(parsedData)) {
      if (!(key in baseline.data)) {
        validation.extra!.push(key)
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ—à–∏–±–∫–∞
      }
    }
    
    return validation
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
   */
  validateCriticalFields(requestType: 'task' | 'sector' | 'bonus', data: any): boolean {
    const parsedData = this.parseFormData(data)
    
    const criticalFields: Record<string, Array<string | RegExp>> = {
      task: ['domain', 'gid', 'level', 'inputTask'],
      sector: ['domain', 'gid', 'level', 'savesector', /txtAnswer_\d+/, /ddlAnswerFor_\d+/],
      bonus: [
        'domain', 'gid', 'level', 'txtBonusName', 
        /answer_-\d+/, 'txtHours', 'txtMinutes', 'txtSeconds'
      ]
    }
    
    const fields = criticalFields[requestType]
    if (!fields) return false
    
    return fields.every(field => {
      if (field instanceof RegExp) {
        return Object.keys(parsedData).some(key => field.test(key))
      }
      return field in parsedData
    })
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  generateReport(results: Map<string, ValidationResult>): string {
    let report = 'üìä –û–¢–ß–ï–¢ –û –í–ê–õ–ò–î–ê–¶–ò–ò –ó–ê–ü–†–û–°–û–í\n'
    report += '=' .repeat(50) + '\n\n'
    
    let totalValid = 0
    let totalInvalid = 0
    
    for (const [key, result] of results.entries()) {
      if (result.valid) {
        totalValid++
        report += `‚úÖ ${key}: –í–∞–ª–∏–¥–Ω—ã–π\n`
      } else {
        totalInvalid++
        report += `‚ùå ${key}: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π\n`
        if (result.error) report += `   –û—à–∏–±–∫–∞: ${result.error}\n`
        if (result.missing?.length) report += `   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: ${result.missing.join(', ')}\n`
        if (result.differences?.length) {
          report += `   –†–∞–∑–ª–∏—á–∏—è:\n`
          result.differences.forEach(d => report += `     - ${d}\n`)
        }
        if (result.extra?.length) report += `   –õ–∏—à–Ω–∏–µ –ø–æ–ª—è: ${result.extra.join(', ')}\n`
      }
      report += '\n'
    }
    
    report += '=' .repeat(50) + '\n'
    report += `–ò–¢–û–ì–û: ‚úÖ ${totalValid} –≤–∞–ª–∏–¥–Ω—ã—Ö, ‚ùå ${totalInvalid} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö\n`
    
    return report
  }
}